[project]
name = "CogniWeaveAgent"
version = "0.1.0"
description = ""
authors = [
    {name = "Kotodama",email = "2682064633@qq.com"}
]
license = {text = "Apache License 2.0"}
readme = "README.md"
keywords = ["agent"]
classifiers = [
]
requires-python = ">=3.11,<4"
dependencies = [
    "aiohttp==3.11.14",
    "anyio==4.8.0",
    "exceptiongroup==1.2.2",
    "pyahocorasick==2.1.0",
    "pydantic==2.11.3",
    "pygtrie==2.5.0",
    "pypinyin==0.54.0",
    "PyYAML==6.0.2",
    "structlog==25.2.0",
    "typing_extensions==4.13.2",
    "langchain",
    "langchain_openai",
    "python-dotenv",
    "httpx[socks]",
]

[project.urls]
Repository = "https://github.com/Inexplicable-YL/CogniWeaveAgent"

[tool.uv]
dev-dependencies = [
    # dev
    "setuptools>=74",
    "trio>=0.26",
    "exceptiongroup>=1",
    "tomli>=2",
    # lint
    "ruff>=0.6",
    "mypy>=1",
    "pylint>=3",
    "pylint-pydantic>=0.3",
    # docs
    "sophia-doc>=0.1",
    "tomlkit>=0.13",
    # test
    "pytest>=8",
    "pytest-mock>=3",
    "pytest-xdist>=3",
    "pytest-cov>=5",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
exclude = ["typeshed-fallback", "*/typeshed/*"]
ignore = [
    "C90",      # mccabe
    "FBT",      # flake8-boolean-trap
    "EM",       # flake8-errmsg
    "INP",      # flake8-no-pep420
    "E501",     # Line too long, handled by formatter
    "D415",     # First line should end with a period, question mark, or exclamation point
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "ASYNC109", # Async function definition with a timeout parameter
    "S101",     # Use of assert detected
    "COM812",   # Trailing comma missing
    "TD003",    # Missing issue link on the line following this TODO
    "FIX002",   # Line contains TODO
    "PGH003",   # Use specific rule codes when ignoring type issues
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "TRY003",   # Avoid specifying long messages outside the exception class
    "PERF203",  # try-except within a loop incurs performance overhead
    "D107",
    "BLE001",
    "PLW2901",
    "TRY301",
    "N802",
    "SLF001",
    "A001",
    "A002",
    "D",
    "DTZ005",
    "DTZ006",
]
allowed-confusables = ["，", "：", "！", "（", "）"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type"]

[tool.ruff.lint.isort]
known-third-party = ["pydantic", "aiohttp", "structlog"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "PLR2004", "T201"]

[tool.pyright]
ignore = ["example/nodes"]
exclude = ["**/.conda", "**/.venv", "**/__pycache__"]
pythonVersion = "3.11"
pythonPlatform = "All"
#typeCheckingMode = "strict"
python.linting.enabled = false
python.linting.mypyEnabled = false
python.linting.pylintEnabled = false
reportUnnecessaryIsInstance = false
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportPropertyTypeMismatch = true
reportInvalidTypeVarUse = false
reportShadowedImports = true
reportUninitializedInstanceVariable = false
reportPrivateUsage = false


#[tool.mypy]
#python_version = "3.11"
#strict = true
#disable_error_code = [
#    "valid-type", 
#    "unused-ignore",
#    "index",
#    "misc",
#]
#warn_return_any = false

#[[tool.mypy.overrides]]
#module = "apscheduler.*"
#ignore_missing_imports = true


[tool.hatch.build]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "/src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
